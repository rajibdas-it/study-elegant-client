[
  {
    "question": "what is `cors`?",
    "answer": "Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a preflight request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request. An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json. For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers."
  },
  {
    "question": "Why are you using `firebase`? What other options do you have to implement authentication?",
    "answer": "Google Firebase is an application development platform that allows developers to create iOS, Android, and Web apps. I am using firebase cause Google Firebase offers many features that pitch it as the go-to backend development tool for web and mobile apps. It reduces development workload and time. And it's a perfect prototyping tool. Firebase is simple, lightweight, friendly, and industrially recognized. When i build a client-side app with  React JS Google Firebase can turn this into a serverless app in no time. With Firebase, it's pretty simple to connect and use built-in third-party authentication providers, including Google, Facebook, Twitter and its more secure than other."
    "Auth0, Amazon, Okta, Passport, MongoDB, Keycloak"
  },
  {
    "question": "How does the private route work?",
    "answer":"Private Routes vary based on the Apps, For example, Dashboard, User Profile, App Settings, Home etc. In simple words, These routes can be accessed only after login. Private routes should not be accessible before login. The private route component is similar to the public route, the only change is that redirect URL and authenticate condition. If the user is not authenticated he will be redirected to the login page and the user can only access the authenticated routes If he is authenticated (Logged in). we have wrapped authenticated routes with <PrivateRoute /> component"

  },
  {
    "question":"What is Node? How does Node work?",
    "answer":"Node.js is an open-source, cross-platform, backend javascript runtime environment. It is a used as backend service where javascript works on the server-side of the application. This way javascript is used on both frontend and backend. Node.js runs on chrome v8 engine which converts javascript code into machine code, it is highly scalable, lightweight, fast, and data-intensive."

    "Node.js is the JavaScript runtime environment which is based on Google V8 Engine i.e. with the help of Node.js we can run the JavaScript outside of the browser. Other things that you may or may not have read about Node.js is that it is single-threaded, based on event-driven architecture, and non-blocking based on the I/O model. Node.js accepts the request from the clients and sends the response, while working with the request node.js handles them with a single thread. To operate I/O operations or requests node.js use the concept of threads. Thread is a sequence of instructions that the server needs to perform. It runs parallel on the server to provide the information to multiple clients. Node.js is an event loop single-threaded language. It can handle concurrent requests with a single thread without blocking it for one request.
    Node.js basically works on two concept
    Asynchronous
    Non-blocking I/O"
  }
]
